
!!! Рассмотреть возможность использования ORM в качестве прямых запросов к бд (как оболочку PDO). 
    Если это возможно, то ORM предпочтительнее простых SQL-запросов, если нет то лучше использвать PDO-подобные оболочки с возможностью прямых sql-запросов.
------------------------------------------------------------------
Сравнение ORM и SQL для конкретной задачи:	
------------------------------------------------------------------
	
Есть общая таблица занятий :

занятие	 |	препод
--------------------
PHP			Иванов 
SQL			Иванов       
Java		Сидоров
CSS			Сидоров

Разбиваем таблицу на две таблицы:

1. Course:
id |course|time| chicher
---------------------------
1	PHP		 10	    1
2	SQL		 15		1
3	Java	 20		2
4	CSS		  8		2

2. 	Chicher:
id | family | adress
---------------------------
1	Иванов		Минск
2	Сидоров		Москва

Задача: Надо найти все занятия, которые ведёт Иванов.
	
-----------------------
SQL:
	SELECT course.course FROM course
		INNER JOIN chicher ON course.chicher = chicher.id
		WHERE chicher.family = 'Иванов'
	Результат: 
	course
	-----------------
	PHP 
	SQL

	Результатом SQL-запроса в php будет массив из двух строк

------------------------
ORM: в php без JOIN-запроса в SQL находим объекты сущности Course, относящиеся к Chicher:
	1. Создаём объект Иванов сущности Chicher (извлекаются все поля для инициализации объекта, что для нашей задачи избыточно)
		$family = 'Иванов';
		"SELECT id, family, adress FROM chicher
			WHERE family = $family";

	2. По id объекта Иванов делаем запрос в SQL (делается второй запрос к бд и второй поиск WHERE)
		$id = $inanov->getId();
		"SELECT id, course, time FROM course
			WHERE id = $id"
	Результатом SQL-запроса в php будут два объекта сущности Course (извлекаются все поля для инициализации объектов, что для нашей задачи избыточно). 	

Вывод: 
	Минусы ORM:
		- ORM при выполнении задачи создал 3 объекта с полным набором их свойств вместо одного маленького массивчика в SQL.
		- ORM отправила 2 запроса вместо одного в SQL
		- ORM сделала 2 проверки в бд, что сопоставимо с join-запросом с проверкой в SQL
		Вывод: перегруженность памяти и снижение произволительности
    
	Плюсы ORM:
		- ORM создала объекты, с которыми можно впоследствие работать с гибкостью ООП без дополнительных запросов к БД 

Общий вывод:
1) Если кроме банального вывода не предполагается дальнейшая работа над результатом запроса к бд (выборка других объекто из бд или
	использование свойств-полей в других объектах), т.е. если нам нужны  данные только для вывода во view, то лучше использовать SQL(PDO-подобные оболочки).
    Типичные примеры использования технологий:
		- выборка данных конкретного посльзователя - как объект через ORM
		- выборка постраничного списка пользователей (напр. по 50 пользователей на страницу) - как массив SQL 
		(понятно, что создавать 50 объектов с полным набором их свойств - логин, пароль, почта, автар и т.д. нет смысла) 
2) SQL можно использовать как для запроса данных для прямого вывода, так и для создания объектов. 
   ORM - только для создания объектов, что приводит либо к смешению sql-кода с orm-кодом, либо к сознательной жертве производительности
   (порой существенной как в примере выше). 

!!! Рассмотреть возможность использования ORM в качестве прямых запросов к бд (как оболочку PDO). 
    Если это возможно, то ORM предпочтительнее простых SQL-запросов, если нет то лучше использвать PDO-подобные оболочки с возможностью прямых sql-запросов.   